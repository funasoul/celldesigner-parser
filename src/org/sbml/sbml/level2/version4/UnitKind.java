/*******************************************************************************
 * Copyright 2016 Kaito Ii, Akira Funahashi
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *******************************************************************************/
//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.8-b130911.1802 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2016.05.30 at 07:47:34 PM JST 
//


package org.sbml.sbml.level2.version4;

import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;
import javax.xml.bind.annotation.XmlType;


// TODO: Auto-generated Javadoc
/**
 * <p>Java class for UnitKind.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;simpleType name="UnitKind">
 *   &lt;restriction base="{http://www.w3.org/2001/XMLSchema}string">
 *     &lt;enumeration value="ampere"/>
 *     &lt;enumeration value="becquerel"/>
 *     &lt;enumeration value="candela"/>
 *     &lt;enumeration value="Celsius"/>
 *     &lt;enumeration value="coulomb"/>
 *     &lt;enumeration value="dimensionless"/>
 *     &lt;enumeration value="farad"/>
 *     &lt;enumeration value="gram"/>
 *     &lt;enumeration value="gray"/>
 *     &lt;enumeration value="henry"/>
 *     &lt;enumeration value="hertz"/>
 *     &lt;enumeration value="item"/>
 *     &lt;enumeration value="joule"/>
 *     &lt;enumeration value="katal"/>
 *     &lt;enumeration value="kelvin"/>
 *     &lt;enumeration value="kilogram"/>
 *     &lt;enumeration value="litre"/>
 *     &lt;enumeration value="lumen"/>
 *     &lt;enumeration value="lux"/>
 *     &lt;enumeration value="metre"/>
 *     &lt;enumeration value="mole"/>
 *     &lt;enumeration value="newton"/>
 *     &lt;enumeration value="ohm"/>
 *     &lt;enumeration value="pascal"/>
 *     &lt;enumeration value="radian"/>
 *     &lt;enumeration value="second"/>
 *     &lt;enumeration value="siemens"/>
 *     &lt;enumeration value="sievert"/>
 *     &lt;enumeration value="steradian"/>
 *     &lt;enumeration value="tesla"/>
 *     &lt;enumeration value="volt"/>
 *     &lt;enumeration value="watt"/>
 *     &lt;enumeration value="weber"/>
 *   &lt;/restriction>
 * &lt;/simpleType>
 * </pre>
 * 
 */
@XmlType(name = "UnitKind")
@XmlEnum
public enum UnitKind {

    /** The ampere. */
    @XmlEnumValue("ampere")
    AMPERE("ampere"),
    
    /** The becquerel. */
    @XmlEnumValue("becquerel")
    BECQUEREL("becquerel"),
    
    /** The candela. */
    @XmlEnumValue("candela")
    CANDELA("candela"),
    
    /** The celsius. */
    @XmlEnumValue("Celsius")
    CELSIUS("Celsius"),
    
    /** The coulomb. */
    @XmlEnumValue("coulomb")
    COULOMB("coulomb"),
    
    /** The dimensionless. */
    @XmlEnumValue("dimensionless")
    DIMENSIONLESS("dimensionless"),
    
    /** The farad. */
    @XmlEnumValue("farad")
    FARAD("farad"),
    
    /** The gram. */
    @XmlEnumValue("gram")
    GRAM("gram"),
    
    /** The gray. */
    @XmlEnumValue("gray")
    GRAY("gray"),
    
    /** The henry. */
    @XmlEnumValue("henry")
    HENRY("henry"),
    
    /** The hertz. */
    @XmlEnumValue("hertz")
    HERTZ("hertz"),
    
    /** The item. */
    @XmlEnumValue("item")
    ITEM("item"),
    
    /** The joule. */
    @XmlEnumValue("joule")
    JOULE("joule"),
    
    /** The katal. */
    @XmlEnumValue("katal")
    KATAL("katal"),
    
    /** The kelvin. */
    @XmlEnumValue("kelvin")
    KELVIN("kelvin"),
    
    /** The kilogram. */
    @XmlEnumValue("kilogram")
    KILOGRAM("kilogram"),
    
    /** The litre. */
    @XmlEnumValue("litre")
    LITRE("litre"),
    
    /** The lumen. */
    @XmlEnumValue("lumen")
    LUMEN("lumen"),
    
    /** The lux. */
    @XmlEnumValue("lux")
    LUX("lux"),
    
    /** The metre. */
    @XmlEnumValue("metre")
    METRE("metre"),
    
    /** The mole. */
    @XmlEnumValue("mole")
    MOLE("mole"),
    
    /** The newton. */
    @XmlEnumValue("newton")
    NEWTON("newton"),
    
    /** The ohm. */
    @XmlEnumValue("ohm")
    OHM("ohm"),
    
    /** The pascal. */
    @XmlEnumValue("pascal")
    PASCAL("pascal"),
    
    /** The radian. */
    @XmlEnumValue("radian")
    RADIAN("radian"),
    
    /** The second. */
    @XmlEnumValue("second")
    SECOND("second"),
    
    /** The siemens. */
    @XmlEnumValue("siemens")
    SIEMENS("siemens"),
    
    /** The sievert. */
    @XmlEnumValue("sievert")
    SIEVERT("sievert"),
    
    /** The steradian. */
    @XmlEnumValue("steradian")
    STERADIAN("steradian"),
    
    /** The tesla. */
    @XmlEnumValue("tesla")
    TESLA("tesla"),
    
    /** The volt. */
    @XmlEnumValue("volt")
    VOLT("volt"),
    
    /** The watt. */
    @XmlEnumValue("watt")
    WATT("watt"),
    
    /** The weber. */
    @XmlEnumValue("weber")
    WEBER("weber");
    
    /** The value. */
    private final String value;

    /**
     * Instantiates a new unit kind.
     *
     * @param v the v
     */
    UnitKind(String v) {
        value = v;
    }

    /**
     * Value.
     *
     * @return the string
     */
    public String value() {
        return value;
    }

    /**
     * From value.
     *
     * @param v the v
     * @return the unit kind
     */
    public static UnitKind fromValue(String v) {
        for (UnitKind c: UnitKind.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }

}
